tosca_definitions_version: tosca_simple_yaml_1_0

relationship_types:
  ## relationship types for Docker
  tosca.relationships.MiCADO.ConnectsTo:
    derived_from: tosca.relationships.ConnectsTo
    properties:
      network:
        type: string
        description: Name of Docker network to connect containers over
        required: true

capability_types:
  ## capabilty types for Docker
  tosca.capabilities.MiCADO.Container.Docker:
    derived_from: tosca.capabilities.Container.Docker
    properties:
      num_cpus:
        type: float
        required: false
        constraints:
          - greater_or_equal: 0.0

  ## capabilty types for EC2
  tosca.capabilities.MiCADO.Occopus.EC2.Cloud:
    derived_from: tosca.capabilities.Container
    properties:
      region_name:
        type: string
        required: true
      image_id:
        type: string
        required: true
      instance_type:
        type: string
        required: true
      key_name:
        type: string
        required: false
      security_group_ids:
        type: list
        required: false
      subnet_id:
        type: string
        required: false

  ## capabilty types for CloudSigma
  tosca.capabilities.MiCADO.Occopus.CloudSigma.Cloud:
    derived_from: tosca.capabilities.Container
    properties:
      num_cpus:
        type: integer
        required: true
        constraints:
          - greater_or_equal: 250
          - less_or_equal: 100000
      mem_size:
        type: integer
        required: true
        constraints:
          - greater_or_equal: 268435456
          - less_or_equal: 137438953472
      libdrive_id:
        type: string
        required: true
      vnc_password:
        type: string
        required: true
      public_key_id:
        type: string
        required: true
      firewall_policy:
        type: string
        required: false
      host_name:
        type: string
        required: false
      description:
        type: string
        required: false
        description: overrides the capability type

  ## capabilty types for Nova
  tosca.capabilities.MiCADO.Occopus.Nova.Cloud:
    derived_from: tosca.capabilities.Container
    properties:
      image_id:
        type: string
        required: true
      flavor_name:
        type: string
        required: true
      tenant_name:
        type: string
        required: false
      project_id:
        type: string
        required: true
      user_domain_name:
        type: string
        required: false
      network_id:
        type: string
        required: true
      server_name:
        type: string
        required: false
      key_name:
        type: string
        required: false
      security_groups:
        type: list
        required: false
      floating_ip:
        type: string
        required: false
      floating_ip_pool:
        type: string
        required: false

  ## capabilty types for CloudBroker
  tosca.capabilities.MiCADO.Occopus.CloudBroker.Cloud:
    derived_from: tosca.capabilities.Container
    properties:
      deployment_id:
        type: string
        required: true
      instance_type_id:
        type: string
        required: true
      key_pair_id:
        type: string
        required: false
      opened_port:
        type: string
        required: false

artifact_types:
  tosca.artifacts.File.Config.Docker:
    derived_from: tosca.artifacts.File
    properties:
      name:
        type: string
        required: false
      file:
        type: string
        required: false
      external:
        type: boolean
        required: false
    tosca.artifacts.File.Secrets.Docker:
      derived_from: tosca.artifacts.File
      properties:
        name:
          type: string
          required: false
        file:
          type: string
          required: false
        external:
          type: boolean
          required: false

data_types:
  ## Daattype that describe the main cloud properties
  tosca.datatypes.MiCADO.Occopus.Cloud:
    derived_from: tosca.datatypes.Root
    properties:
      interface_cloud:
        type: string
        required: yes
        constraints:
          - valid_values: [ 'ec2', 'nova', 'cloudsigma', 'cloudbroker' ]
      endpoint_cloud:
        type: string
        required: yes
      credentials:
        type: tosca.datatypes.credentials
        required: false
  deploy_type:
    properties:
      mode:
        type: string
        required: false
      replicas:
        type: integer
        required: false
      resources:
        type: resource_type
        required: false
      labels:
        type: map
        required: false
      placement:
        type: placement_type
        required: false
      restart_policy:
        type: map
        required: false
      update_config:
        type: map
        required: false
  resource_type:
    properties:
      reservations:
        type: map
        required: false
      limits:
        type: map
        required: false
  placement_type:
    properties:
      constraints:
        required: false
        type: list
      preferences:
        required: false
        type: list

node_types:
  ## Node type that describe the Virtual Machine on which
  ## the container is supposed to run
  tosca.nodes.MiCADO.Compute:
    derived_from: tosca.nodes.Compute
    properties:
      cloud:
        type: tosca.datatypes.MiCADO.Occopus.Cloud

    capabilities:
      host:
        type: tosca.capabilities.MiCADO.Occopus.Cloud

  ## specific node type to describe the instance on  CloudSigma
  tosca.nodes.MiCADO.Occopus.CloudSigma.Compute:
    derived_from: tosca.nodes.MiCADO.Compute
    properties:
      cloud:
        type: tosca.datatypes.MiCADO.Occopus.Cloud
    capabilities:
      host:
        type: tosca.capabilities.MiCADO.Occopus.CloudSigma.Cloud

  ## specific node type to describe the instance on  EC2
  tosca.nodes.MiCADO.Occopus.EC2.Compute:
    derived_from: tosca.nodes.MiCADO.Compute
    properties:
      cloud:
        type: tosca.datatypes.MiCADO.Occopus.Cloud

    capabilities:
      host:
        type: tosca.capabilities.MiCADO.Occopus.EC2.Cloud

  ## specific node type to describe the instance on  CloudBroker
  tosca.nodes.MiCADO.Occopus.CloudBroker.Compute:
    derived_from: tosca.nodes.MiCADO.Compute
    properties:
      cloud:
        type: tosca.datatypes.MiCADO.Occopus.Cloud

    capabilities:
      host:
        type: tosca.capabilities.MiCADO.Occopus.CloudBroker.Cloud

  ## specific node type to describe the instance on  Nova
  tosca.nodes.MiCADO.Occopus.Nova.Compute:
    derived_from: tosca.nodes.MiCADO.Compute
    properties:
      cloud:
        type: tosca.datatypes.MiCADO.Occopus.Cloud

    capabilities:
      host:
        type: tosca.capabilities.MiCADO.Occopus.Nova.Cloud


  ## Node Type to describe  docker nodes (it will contains the command
  ## line to pass to the docker)
  ## ** Properties altered to match keys under the top-level "services:" of a Docker-Compose file

  tosca.nodes.MiCADO.network.Network.Docker:
    derived_from: tosca.nodes.network.Network
    description: description of a Docker network
    properties:
      attachable:
        type: boolean
        description: is attachable
        required: false
      driver:
        type: string
        description: network driver
        required: false
      external:
        type: boolean
        required: false
      driver_opts:
        type: map
        description: network driver options (incl. mtu)
        required: false
      ip_version:
        type: integer
        required: false
        default: null
      dhcp_enabled:
        type: boolean
        required: false
        default: null

  tosca.nodes.MiCADO.Volume.Docker:
    derived_from: tosca.nodes.BlockStorage
    description: description of a Docker volume
    properties:
      name:
        type: string
        description: name of the volume
        required: false
      labels:
        type: map
        description: map of metadata labels
        required: false
      size:
        type: scalar.unit-size
        description: overwrite size requirement
        required: false
    capabilities:
      volume:
        type: tosca.capabilities.Attachment

  tosca.nodes.MiCADO.Container.Application.Docker:
    derived_from: tosca.nodes.Container.Application.Docker
    description: description of a Docker service
    properties:
      command:
        type: string
        description: command line to be executed by the container.
        required: false
      configs:
        type: list
        description: grant access to a docker config (define artifact first)
        required: false
      deploy:
        type: deploy_type
        description: swarm-specific configuration settings
        required: false
      entrypoint:
        type: string
        desciption: override the default entrypoint of container
        required: false
      environment:
        type: map
        description: map of all the environment variable required.
        required: false
        entry_schema:
          type: string
      expose:
        type: list
        description: ports to expose internally
        required: false
      image:
        type: string
        description: docker image, prefixed by repository if private
        required: false
      stop_grace_period:
        type: string
        description: time to wait to stop a container
        required: false
      labels:
        required: false
        type: map
        entry_schema:
          type: string
      logging:
        required: false
        type: map
      networks:
        required: false
        type: list
      volumes:
        required: false
        type: list
      ports:
        type: list
        description: port exposed inside container
        required: false
      secrets:
        type: list
        required: false
      tty:
        type: boolean
        required: false

    attributes:
      ip_address:
        type: string
      port:
        type: integer
    capabilities:
      service:
        type: tosca.capabilities.Endpoint

    requirements:
      - service:
          capability: tosca.capabilities.Endpoint
          node: tosca.nodes.MiCADO.Container.Application.Docker
          relationship: tosca.relationships.MiCADO.ConnectsTo
      - host:
          capability: tosca.capabilities.Container
          node: tosca.nodes.MiCADO.Compute
          relationship: tosca.relationships.HostedOn
      - volume:
          capability: tosca.capabilities.Attachment
          node: tosca.nodes.MiCADO.Volume.Docker
          relationship: tosca.relationships.AttachesTo

policy_types:
  tosca.policies.Scaling.MiCADO:
    derived_from: tosca.policies.Scaling
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      sources:
        type: list
        description: list of prometheus exporters as data sources
        required: false
      constants:
        type: map
        description: list of constants referred in other sections
        required: false
      alerts:
        type: list
        description: list of prometheus alerts
        required: false
      queries:
        type: map
        description: list of variables and their associated prometheus query
        required: false
      stage:
        type: string
        description: the stage that will be affected by the policy (not yet implemented)
        default: started
        required: false
      priority:
        type: integer
        description: the priority with which the policy will be exectued (not yet implemented)
        default: 100
        required: false
      min_instances:
        type: integer
        required: true
        description: defines the min instances to scale to
      max_instances:
        type: integer
        required: true
        description: defines the max instances to scale to
      scaling_rule:
        type: string
        description: python code to define scaling rule
        required: true

  tosca.policies.Scaling.MiCADO.Container.CPU:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for container CPU
        default:
        - alert: service_overloaded
          expr: 'avg(rate(container_cpu_usage_seconds_total{container_label_com_docker_swarm_service_name="{{SERVICE_FULL_NAME}}"}[30s]))*100 > {{SERVICE_TH_MAX}}'
          for: 30s
        - alert: service_underloaded
          expr: 'avg(rate(container_cpu_usage_seconds_total{container_label_com_docker_swarm_service_name="{{SERVICE_FULL_NAME}}"}[30s]))*100 < {{SERVICE_TH_MIN}}'
          for: 30s
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for container CPU
        default: |
          if len(m_nodes) == m_node_count:
            if service_overloaded and m_node_count > m_container_count:
              m_container_count+=1
            if service_underloaded:
              m_container_count-=1
          else:
            print('Transient phase, skipping update of containers...')
        required: true

  tosca.policies.Scaling.MiCADO.VirtualMachine.CPU:
    derived_from: tosca.policies.Scaling.MiCADO
    description: base MiCADO policy defining data sources, constants, queries, alerts, limits and rules
    properties:
      alerts:
        type: list
        description: pre-define alerts for VM CPU
        default:
        - alert: node_overloaded
          expr: '(100-(avg(rate(node_cpu{group="worker_cluster",mode="idle"}[60s]))*100)) > {{NODE_TH_MAX}}'
          for: 1m
        - alert: node_underloaded
          expr: '(100-(avg(rate(node_cpu{group="worker_cluster",mode="idle"}[60s]))*100)) < {{NODE_TH_MIN}}'
          for: 1m
        required: true
      scaling_rule:
        type: string
        description: pre-define scaling rule for VM CPU
        default: |
          if len(m_nodes) <= m_node_count and m_time_since_node_count_changed > 60:
            if node_overloaded:
              m_node_count+=1
            if node_underloaded:
              m_node_count-=1
          else:
            print('Transient phase, skipping update of nodes...')
        required: true
